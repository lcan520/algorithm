//ÁªôÂÆö‰∏Ä‰∏™ Êó†ÈáçÂ§çÂÖÉÁ¥† ÁöÑ ÊúâÂ∫è Êï¥Êï∞Êï∞ÁªÑ nums „ÄÇ 
//
// ËøîÂõû ÊÅ∞Â•ΩË¶ÜÁõñÊï∞ÁªÑ‰∏≠ÊâÄÊúâÊï∞Â≠ó ÁöÑ ÊúÄÂ∞èÊúâÂ∫è Âå∫Èó¥ËåÉÂõ¥ÂàóË°® „ÄÇ‰πüÂ∞±ÊòØËØ¥Ôºånums ÁöÑÊØè‰∏™ÂÖÉÁ¥†ÈÉΩÊÅ∞Â•ΩË¢´Êüê‰∏™Âå∫Èó¥ËåÉÂõ¥ÊâÄË¶ÜÁõñÔºåÂπ∂‰∏î‰∏çÂ≠òÂú®Â±û‰∫éÊüê‰∏™ËåÉÂõ¥‰ΩÜ‰∏çÂ±û‰∫é 
//nums ÁöÑÊï∞Â≠ó x „ÄÇ 
//
// ÂàóË°®‰∏≠ÁöÑÊØè‰∏™Âå∫Èó¥ËåÉÂõ¥ [a,b] Â∫îËØ•ÊåâÂ¶Ç‰∏ãÊ†ºÂºèËæìÂá∫Ôºö 
//
// 
// "a->b" ÔºåÂ¶ÇÊûú a != b 
// "a" ÔºåÂ¶ÇÊûú a == b 
// 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// 
//ËæìÂÖ•Ôºönums = [0,1,2,4,5,7]
//ËæìÂá∫Ôºö["0->2","4->5","7"]
//Ëß£ÈáäÔºöÂå∫Èó¥ËåÉÂõ¥ÊòØÔºö
//[0,2] --> "0->2"
//[4,5] --> "4->5"
//[7,7] --> "7"
// 
//
// Á§∫‰æã 2Ôºö 
//
// 
//ËæìÂÖ•Ôºönums = [0,2,3,4,6,8,9]
//ËæìÂá∫Ôºö["0","2->4","6","8->9"]
//Ëß£ÈáäÔºöÂå∫Èó¥ËåÉÂõ¥ÊòØÔºö
//[0,0] --> "0"
//[2,4] --> "2->4"
//[6,6] --> "6"
//[8,9] --> "8->9"
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 0 <= nums.length <= 20 
// -2¬≥¬π <= nums[i] <= 2¬≥¬π - 1 
// nums ‰∏≠ÁöÑÊâÄÊúâÂÄºÈÉΩ ‰∫í‰∏çÁõ∏Âêå 
// nums ÊåâÂçáÂ∫èÊéíÂàó 
// 
//
// Related Topics Êï∞ÁªÑ üëç 213 üëé 0


package com.algorithm.leetcode.editor.cn;
import cn.hutool.core.date.TimeInterval;
import cn.hutool.core.date.DateUtil;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class P228SummaryRanges {
    public static void main(String[] args) {
        Solution solution = new P228SummaryRanges().new Solution();
        TimeInterval timer = DateUtil.timer();
        // TODO ‰ª£Á†ÅË∞ÉÁî®solution.<method>
        long interval = timer.interval();
        System.out.println("interval = " + interval + "ms");
    }
//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public List<String> summaryRanges(int[] nums) {
        int p1 = 0;
        int p2 = 1;
        if (nums.length == 0) {
            return new ArrayList<>();
        }
        if (nums.length == 1) {
            return new ArrayList<>(Collections.singletonList(String.valueOf(nums[0])));
        }
        ArrayList<String> result = new ArrayList<>();
        for (int i = 0; p1 < nums.length; i++) {
            if (p2 <= nums.length - 1 && nums[i] + 1 == nums[p2] ) {
                p2++;
            } else {
                if (p1 < p2 - 1) {
                    result.add(nums[p1] + "->" + nums[i]);
                } else {
                    result.add(String.valueOf(nums[i]));
                }
                p1 = p2;
                p2++;
            }
        }
        return result;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
    
}   

 